Generate Games - Save
Wizard - step by step (Resource Scheduling, League/Program Management, Game Scheduling/Scores, CRM & Email Campaign)

User Password - encrypt, Forgot
User Registration

Register for Program/Participant, League/Team, Team/TeamPlayer

<input class="button-clean" type="button" name="createAcct" value="New Account" onclick="location.href='${pageContext.request.contextPath}/login'" />

<a href="${pageContext.request.contextPath}/editTswacct?tswAcctIdKey=${user.tswacct.tswAcctId}&">
.popup.dialog ?
Search Lightbox popup
Datepicker
Form input validation

<input type="url" name="website" placeholder="http://johndoe.com" required pattern="(http|https)://.+" />
http://webdesign.tutsplus.com/tutorials/site-elements/bring-your-forms-up-to-date-with-css3-and-html5-validation/
http://www.html5rocks.com/en/tutorials/forms/html5forms/

Charts/Graphs - implement
Scheduling - evolve & implement

FAQ - evolve
email - implement

THYMELEAF+ SPRING3

JasperReportsUtils - Utility methods for working with JasperReports. Provides a set of convenience
    methods for generating reports in a CSV, HTML, PDF and XLS formats.
 
    @Transactional(propagation = Propagation.REQUIRES_NEW)
 import java.util.concurrent.*;
 public class ThreadPerTaskExecutor implements Executor {
    public void execute(Runnable r) {
        new Thread(r).start();
    };
}
private TaskExecutor taskExecutor;
taskExecutor.execute(new MessageTask("Message" + i));

  private class MessageTask implements Runnable {
    private String message;
    public MessageTask(String message) {
      this.message = message;
    }
    public void run() {
      System.out.println(message);
    }
  }
 
 <bean id="generatedGame" class="tsw.utils.GeneratedGame">
  </bean>
	<bean id="generatedGames" class="tsw.utils.ProgramGeneratedGames">
    <property name="games">
      <list>
        <value>1</value>
        <ref bean="generatedGame" />
      </list>
    </property>
  </bean>

type=button
type=checkbox
type=color (HTML 5 only)
type=date (HTML 5 only)
type=datetime (HTML 5 only)
type=datetime-local (HTML 5 only)
type=emaiil (HTML 5 only)
type=file
type=hidden
type=image
type=month (HTML 5 only)
type=number (HTML 5 only)
type=password
type=radio
type=range (HTML 5 only)
type=reset
type=search (HTML 5 only)
type=submit
type=tel (HTML 5 only)
type=text
type=tiime (HTML 5 only)
type=url (HTML 5 only)
type=week (HTML 5 only)



<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script src="http://code.jquery.com/ui/1.10.1/jquery-ui.js"></script>
<script>
$(function() { $( "#datepicker" ).datepicker({ showButtonPanel: true }); });
</script>
<style>
.dateStyle {
	font-family: "Trebuchet MS", "Helvetica", "Arial",  "Verdana", "sans-serif";
	font-size: 62.5%;
}
</style>
<p>Date: <input type="text" id="datepicker" /></p>



Outgoing Mail (SMTP) Server - requires TLS or SSL: 	smtp.gmail.com
Use Authentication: Yes
Port for TLS/STARTTLS: 587
Port for SSL: 465
Server timeouts 	Greater than 1 minute, we recommend 5
Full Name or Display Name: 	[your name]
Account Name or User Name: 	your full email address (including @gmail.com or @your_domain.com)
Email Address: 	your email address (username@gmail.com or username@your_domain.com)
Password: 	your Gmail password

VelocityEngineUtils...

StringWriter writer = new StringWriter();
        VelocityEngineUtils.mergetTemplate(velocityEngine, templateLocation + "/" + htmlTemplateSuffix, mergeObjects, writer);
        String htmlString = new StringWriter();
        VelocityEngineUtils.mergetTemplate(velocityEngine, templateLocation + "/" + htmlTemplateSuffix, mergeObjects, writer);
        writer.close();
        htmlString.close();
        helper.setText(writer.toString(), htmlString.toString());
        helper.setSubject(subject);

${sessionScope.selectTheme}

<c:set var="selectTheme" value="Black" />	
<c:if test='${user.selectTheme}' >
	 <c:set var="selectTheme" value="${user.selectTheme}" />	
</c:if>	


Lists:
<th class="text-center">Events&nbsp;&nbsp;|&nbsp;&nbsp;Edit&nbsp;&nbsp;|&nbsp;&nbsp;Delete</th>
<span><img class="icon" src="explorer/images/icons/icon-calendar.png" alt="Events" /></span></a>

<a class="button-clean" 
<span><img class="icon" src="explorer/images/icons/icon-view.png" alt="Search" /></span></a>


<th class="text-center">Edit&nbsp;&nbsp;|&nbsp;&nbsp;Delete</th>

<span><img class="icon" src="explorer/images/icons/icon-edit.png" alt="Edit" /></span></a>
<span><img class="icon" src="explorer/images/icons/icon-delete.png" alt="Delete"></span></a>


						<br/>
						<div class="help">
							<h4 class="help-button">Help</h4>
							
							<div class="popup-help">
								<div class="center">
									<div class="top">
										<h3 class="strong">Interactive help over here</h3>
										<p>An important consideration in heading is the tendency for the bar to buckle if its unsupported length to diameter.
										   The  ratio is too high.
										</p>									   
									</div>
								</div>
								<div class="bottom"></div>
							</div>
						</div>
						
						
http://ebr.springsource.com/repository/app/

${users.selectTheme}						
Default
Green
Orange

	@RequestMapping("/dashboard")
	public ModelAndView dashboard(HttpServletRequest request) {
		if(!sessionCache.isSessionAuthenitcated(request)){
			return login(request);
		}
		
		
			
		
   <beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />
<password-encoder ref="passwordEncoder"/>


You can either set the session timeout (say 60 minutes) for all sessions in web.xml:

<session-config>
  <session-timeout>60</session-timeout>
</session-config>

or on a per-session basis using

session.setMaxInactiveInterval(60*60);

the latter you might want to do in a authorizationSuccessHandler.

<form-login authentication-success-handler-ref="authenticationSuccessHandler"/>



		<beans:property name="authoritiesByUsernameQuery" value="SELECT u.username, a.authorityname FROM Users u JOIN Users_Authorities ua on u.userId = ua.user_id JOIN Authorities a on ua.authorities_id = a.authorityId WHERE u.username = ?"/>

<authentication-manager alias="authenticationManager">
	<authentication-provider user-service-ref="userDetailsService">
		<password-encoder hash="md5"/>
	</authentication-provider>
</authentication-manager>


took from web.xml

	<servlet>
		<display-name>JAX-RS REST Servlet</display-name>
		<servlet-name>JAX-RS REST Servlet</servlet-name>
		<servlet-class>
			com.sun.jersey.spi.container.servlet.ServletContainer
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>JAX-RS REST Servlet</servlet-name>
		<url-pattern>/services/*</url-pattern>
	</servlet-mapping>
	

	
	
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>

<span>. <sec:authentication property="principal.username"/> .</span><span>|</span>


<global-method-security>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.ProgramService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.ProgramDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.EventService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.EventDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.TeamplayersService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.TeamplayersDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.PriceService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.PriceDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.GameService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.GameDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.ResourceService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.ResourceDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.LevelService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.LevelDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.CustomerService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.CustomerDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.TeamService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.TeamDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.ParticipantService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.ParticipantDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.TswacctService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.TswacctDAO.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.service.fcEventService.*(..))"/>
		<protect-pointcut access="IS_AUTHENTICATED_REMEMBERED" expression="execution(* tsw.dao.fcEventDAO.*(..))"/>
	</global-method-security>



 	
	<ehcache:annotation-driven />
		 
	<ehcache:config cache-manager="cacheManager">
	    <ehcache:evict-expired-elements interval="60" />
	</ehcache:config>
	
 	<!-- bean id="sessionConfigCache" class="tsw.web.SessionConfigCache" scope="application"/ --> 	
 	
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	    <property name="configLocation"  value="/WEB-INF/ehcache.xml"/>
	</bean>
			


<!DOCTYPE html "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <title>Google Maps JavaScript API Example</title>
    <script src="http://maps.google.com/maps?file=api&amp;v=2&amp;key=abcdefg&sensor=true_or_false"
            type="text/javascript"></script>
    <script type="text/javascript">

    function initialize() {
      if (GBrowserIsCompatible()) {
        var map = new GMap2(document.getElementById("map_canvas"));
        map.setCenter(new GLatLng(37.4419, -122.1419), 13);
        map.setUIToDefault();
      }
    }

    </script>
  </head>
  <body onload="initialize()" onunload="GUnload()">
    <div id="map_canvas" style="width: 500px; height: 300px"></div>
  </body>
</html>

	