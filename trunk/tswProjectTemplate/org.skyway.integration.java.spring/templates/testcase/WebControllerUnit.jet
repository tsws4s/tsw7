<%@ jet 
package="org.skyway.integration.java.spring.jet.test"
class="WebControllerUnitTemplate" 
%>
<%@taglib id="org.eclipse.jet.javaTags" prefix="java"%>
<%@taglib prefix="ws" id="org.eclipse.jet.workspaceTags"%>
<%@taglib prefix="c" id="org.eclipse.jet.controlTags"%>
<%@taglib prefix="sw" id="org.skyway.integration.java.skywayCodeGenTags"%>
<%@taglib prefix="swspr" id="org.skyway.integration.java.spring.skywaySpringCodeGenTags"%>

package <sw:package alias="test" select="$model" var="pkg"/>;
<sw:javaType alias="test" select="$model" package="true" var="fullyQualifiedClassName" emit="false"/>
<java:importsLocation package="{$pkg}"/>
<java:impliedImport name="{$fullyQualifiedClassName}"/>

/**
 * Unit test for the <code><sw:javaType select="$model" /></code> controller.
 *
 * @see <sw:javaType select="$model" package="true" />
<sw:generated />
<sw:auxiliaryModelComponent />
 */
<sw:variableStorageReset scope="class" />
<swspr:springContexts select="$model" var="springContexts" contextTypes="all" />
@<java:import>org.junit.runner.RunWith</java:import>(<java:import>org.springframework.test.context.junit4.SpringJUnit4ClassRunner</java:import>.class)
@<java:import>org.springframework.test.context.ContextConfiguration</java:import>(locations={ 
			<c:iterate select="$springContexts" var="springContext" delimiter=",">"<swspr:springContextPath select="$springContext" pathFormat="fileProjectRelative" />"
			</c:iterate>})
public class <sw:javaType alias="test" select="$model" /> {
	/**
	 * The Spring application context.
	 *
	 <sw:generated />
	 */
	private <java:import>org.springframework.context.ApplicationContext</java:import> context;

	<c:iterate select="$model/actionMappings" var="requestMapping">
	 	/**
		 * Test <code><sw:normalize select="$requestMapping/url" />()</code>.
		 <sw:generated />
		 <sw:ifDSLEnabled>
		 *
		 * TO AVOID LOSING MANUAL CHANGES, turn generation off for this file or method.
		 * Generation of the entire file can be disabled on the Code Generation tab of the Spring DSL editor.
		 * Alternately, you can add the NOT keyword after the @generated annotation above the class declaration.
		 * Add the NOT keyword after the @generated annotation on this method to preserve changes to this method only.
		 </sw:ifDSLEnabled>
		 */
		@<java:import>org.junit.Test</java:import>
		@SuppressWarnings("unused")
		public void <sw:requestMethod select="$requestMapping" /><sw:normalize select="$requestMapping/url" />() throws Exception {
			<java:import>org.springframework.mock.web.MockHttpServletRequest</java:import> request = getMockHttpServletRequest();
			request.setRequestURI("<c:get select="$requestMapping/url" />");
			<java:import>org.springframework.mock.web.MockHttpServletResponse</java:import> response = getMockHttpServletResponse();
			
			// Get the singleton controller instance
			<java:import><sw:javaType select="$model" package="true" /></java:import> controller = (<sw:javaType select="$model" />)context.getBean("<swspr:componentID select="$model" />");
			
			// TODO Invoke method and Assert return values
 	
		}
		
	</c:iterate>
	
	/**
	 * Autowired to set the Spring application context.
	 *
	 <sw:generated />
	 */
	@<java:import>org.springframework.beans.factory.annotation.Autowired</java:import>
	public void setContext(<java:import>org.springframework.context.ApplicationContext</java:import> context) {
		this.context = context;
		((<java:import>org.springframework.beans.factory.support.DefaultListableBeanFactory</java:import>)context.getAutowireCapableBeanFactory()).registerScope("session", new <java:import>org.springframework.web.context.request.SessionScope</java:import>());
		((<java:import>org.springframework.beans.factory.support.DefaultListableBeanFactory</java:import>)context.getAutowireCapableBeanFactory()).registerScope("request", new <java:import>org.springframework.web.context.request.RequestScope</java:import>());
	}
	
	/**
	 * Returns a mock HttpServletRequest object.
	 *
	 <sw:generated />
	 */
	private <java:import>org.springframework.mock.web.MockHttpServletRequest</java:import> getMockHttpServletRequest() {
		<java:import>org.springframework.mock.web.MockHttpServletRequest</java:import> request = new MockHttpServletRequest();
		<java:import>org.springframework.web.context.request.ServletRequestAttributes</java:import> attributes = new ServletRequestAttributes(request);
		<java:import>org.springframework.web.context.request.RequestContextHolder</java:import>.setRequestAttributes(attributes);
		return request;
	}
	
	/**
	 * Returns a mock HttpServletResponse object.
	 *
	 <sw:generated />
	 */
	private <java:import>org.springframework.mock.web.MockHttpServletResponse</java:import> getMockHttpServletResponse() {
		return new MockHttpServletResponse(); 
	}
}