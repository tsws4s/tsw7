<%@ jet 
package="com.skyway.integration.google.webtoolkit.deploy.templates" 
class="SingleRelatedWidgetTemplate" 
%>
<%@taglib id="org.eclipse.jet.javaTags" prefix="java"%>
<%@taglib prefix="ws" id="org.eclipse.jet.workspaceTags"%>
<%@taglib prefix="c" id="org.eclipse.jet.controlTags"%>
<%@taglib prefix="sw" id="org.skyway.integration.java.skywayCodeGenTags"%>

package <sw:package select="$model" alias="gwteditwidget" var="pkg"/>;
<sw:javaType select="$model" package="true" var="fullyQualifiedClassName" emit="false"/>
<java:importsLocation package="{$pkg}"/>
<java:impliedImport name="{$fullyQualifiedClassName}"/>

<sw:getVariableName select="$model" uncapitalize="true" var="domainObjName" emit="false"/> <sw:getVariableName select="$model" uncapitalize="false" var="DomainObjName" emit="false"/>

/**
 * The view for editing a ONE side relationship with <sw:javaType select="$model" alias="gwtdatatype" package="false"/>
 * This view is constructed using UIBinder
<sw:generated />
 */
public class <sw:javaType select="$model" alias="gwtsinglerelatedwidget" package="false"/> extends <java:import> com.google.gwt.user.client.ui.Composite</java:import> implements <sw:javaType select="$model" alias="gwtrelatededitor" package="false"/>.Display{
	
	/**
	* Interface for UIBinder extension
<sw:generated />
	*/ 
	@<java:import>com.google.gwt.uibinder.client.UiTemplate</java:import>("<sw:javaType select="$model" alias="gwtsinglerelatedwidgetuixml" package="false"/>.xml")
	interface EditBinder extends <java:import>com.google.gwt.uibinder.client.UiBinder</java:import><<java:import>com.google.gwt.user.client.ui.Widget</java:import>, <sw:javaType select="$model" alias="gwtsinglerelatedwidget" package="false"/>>{}
	
	/**
	* Instance of EditBinder interface loaded through GWT.create
<sw:generated />
	*/ 
	private static EditBinder binder = <java:import>com.google.gwt.core.client.GWT</java:import>.create(EditBinder.class);
	
	/**
	* Instance of Editor for <sw:javaType select="$model" alias="gwtdatatype" package="false"/>
<sw:generated />
	*/ 
	private <java:import><sw:javaType select="$model" alias="gwteditor" package="true"/></java:import> editor;
	
	/**
	* New button
<sw:generated />
	*/ 
	@<java:import>com.google.gwt.uibinder.client.UiField</java:import>
	<java:import>com.google.gwt.user.client.ui.Button</java:import> newButton;
	
	/**
	* Remove button
<sw:generated />
	*/ 
	@UiField
	Button removeButton;
	
	/**
	* Select button
<sw:generated />
	*/ 
	@UiField
	Button selectButton;
	
	/**
	* Edit button
<sw:generated />
	*/ 
	@UiField
	Button editButton;
	
	/**
	* Disclosure panel that houses the relationship edit widget
<sw:generated />
	*/ 
	@UiField
    <java:import>com.google.gwt.user.client.ui.DisclosurePanel</java:import> <c:get select="$domainObjName"/>Panel;
	
	/**
	* The Edit Widget for <sw:javaType select="$model" alias="gwtdatatype" package="false"/>
	* Injected here to allow for event handling on its controls
<sw:generated />
	*/ 
	@UiField
	<java:import><sw:javaType select="$model" alias="gwteditwidget" package="true"/></java:import> editWidget;
	
	/**
	* An instance of HasValue that provides access data in the relationship, the Editor is designed to work with a Collection
	* This implementation returns a collection with only one Object in it since it represents a ONE sided relationship
<sw:generated />
	*/ 
	private HasValue<Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>> valueProvider;
	
	
	/**
	* Constructor
<sw:generated />
	*/ 
	public <sw:javaType select="$model" alias="gwtsinglerelatedwidget" package="false"/>() {
		initWidget(binder.createAndBindUi(this));
		
		initValueProvider();
		
		editor = new <sw:javaType select="$model" alias="gwteditor" package="false"/>(editWidget);	
	}
	
	/**
	* Create a value provider that is responsible for wrapping the <sw:javaType select="$model" alias="gwtdatatype" package="false"/> from the Editor
<sw:generated />
	*/ 
	private void initValueProvider () {
		valueProvider = new HasValue<Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>>() {

			public Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>> getValue() {
				<java:import>java.util.HashSet</java:import><<sw:javaType select="$model" alias="gwtdatatype" package="false"/>> set = new HashSet<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>();
				set.add(editor.get<c:get select="$DomainObjName"/>());
				return set;
			}

			public void setValue(Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>> value) {
				if (!value.isEmpty())
					editor.edit(value.iterator().next());
			}

			public void setValue(Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>> value, boolean fireEvents) {
				// TODO Auto-generated method stub
			}

			public <java:import>com.google.gwt.event.shared.HandlerRegistration</java:import> addValueChangeHandler(<java:import>com.google.gwt.event.logical.shared.ValueChangeHandler</java:import><Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>> handler) {
				// TODO Auto-generated method stub
				return null;
			}

			public void fireEvent(<java:import>com.google.gwt.event.shared.GwtEvent</java:import><?> event) {
				// TODO Auto-generated method stub	
			}
		};
	}
	
	/**
	* The HasValue provider for the related <sw:javaType select="$model" alias="gwtdatatype" package="false"/>
<sw:generated />
	*/ 
	public <java:import>com.google.gwt.user.client.ui.HasValue</java:import><<java:import>java.util.Set</java:import><<java:import><sw:javaType select="$model" alias="gwtdatatype" package="true"/></java:import>>> <c:get select="$domainObjName"/>s() {
		return valueProvider;
	}

	/**
	* The OpenHandler that can be used to determine when to trigger the loadding of the relationship data
<sw:generated />
	*/ 
	public <java:import>com.google.gwt.event.logical.shared.HasOpenHandlers</java:import><DisclosurePanel> get<c:get select="$DomainObjName"/>sOpened() {
		return <c:get select="$domainObjName"/>Panel;
	}

	/**
	* The New gesture provider
<sw:generated />
	*/ 
	public <java:import>com.google.gwt.event.dom.client.HasClickHandlers</java:import> getNewButton() {
		return newButton;
	}
	
	/**
	* The Remove gesture provider
<sw:generated />
	*/ 
	public HasClickHandlers getRemoveButton() {
		return removeButton;
	}

	/**
	* The Select gesture provider
<sw:generated />
	*/ 
	public HasClickHandlers getSelectButton() {
		return selectButton;
	}

	/**
	* The HasValue provider for the related <sw:javaType select="$model" alias="gwtdatatype" package="false"/>
<sw:generated />
	*/ 
	public HasValue<Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>> selected<c:get select="$domainObjName"/>s() {
		return valueProvider;
	}
	
	/**
	* Returns the Edit Button from the Display that could be used to edit the currently mapped relationship
<sw:generated />
	*/ 
	public HasClickHandlers getEditButton() {
		return editButton;
	}
}
