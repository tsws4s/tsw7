<%@ jet 
package="com.skyway.integration.google.webtoolkit.deploy.templates" 
class="StoredTemplate" 
%>
<%@taglib id="org.eclipse.jet.javaTags" prefix="java"%>
<%@taglib prefix="ws" id="org.eclipse.jet.workspaceTags"%>
<%@taglib prefix="c" id="org.eclipse.jet.controlTags"%>
<%@taglib prefix="sw" id="org.skyway.integration.java.skywayCodeGenTags"%>


package <sw:package select="$model" alias="gwtstored" var="pkg"/>;
<sw:javaType select="$model" package="true" var="fullyQualifiedClassName" emit="false"/>
<java:importsLocation package="{$pkg}"/>
<java:impliedImport name="{$fullyQualifiedClassName}"/>

<sw:getVariableName select="$model" uncapitalize="true" var="domainObjName" emit="false"/> <sw:getVariableName select="$model" uncapitalize="false" var="DomainObjName" emit="false"/>

/**
 * Callback handler for the <sw:javaType select="$model" alias="gwtstore" package="false"/> Action which is used to load <sw:javaType select="$model" package="false"/>s.
 * This handler is called when the result of the Store action are received.
<sw:generated />
 */
public abstract class <sw:javaType select="$model" alias="gwtstored" package="false"/> implements <java:import>com.google.gwt.user.client.rpc.AsyncCallback</java:import><<sw:javaType select="$model" alias="gwtstoreresponse" package="false"/>> {
	
	/**
	* Handles Exceptions from the remote call, this method will push any exception on the the EventBus
<sw:generated />
	*/
	public void onFailure (Throwable failure) {
		try {
			throw failure;
		}
		catch (<java:import><sw:javaType select="$model/project" alias="gwtcrudexception" package="true"/></java:import> ae) {
			<java:import><sw:javaType select="$model/project" alias="gwteventbus" package="true"/></java:import>.get().fireEvent(new <java:import><sw:javaType select="$model/project" alias="gwtcrudexceptionevent" package="true"/></java:import>(ae));
		} catch (Throwable e) {
			<java:import><sw:javaType select="$model/project" alias="gwteventbus" package="true"/></java:import>.get().fireEvent(new <java:import><sw:javaType select="$model/project" alias="gwtcrudexceptionevent" package="true"/></java:import>(new <sw:javaType select="$model/project" alias="gwtcrudexception" package="false"/>(e)));
		}
	}
	
	/**
	* Async Callback Handler passes through to abstract override method
	* This method will push a <sw:javaType select="$model" alias="gwtstoredevent" package="false"/> on to the EventBus but also calls through to 
	* stored to allow for non event based handling
<sw:generated />
	*/
	public void onSuccess (<sw:javaType select="$model" alias="gwtstoreresponse" package="false"/> result) {
		<java:import><sw:javaType select="$model/project" alias="gwteventbus" package="true"/></java:import>.get().fireEvent(new <java:import><sw:javaType select="$model" alias="gwtstoredevent" package="true"/></java:import>(result.get<c:get select="$DomainObjName"/>()));
		stored (result.get<c:get select="$DomainObjName"/>());
	}
	
	/**
	* Extensions should override this method to handle results of the remote call
<sw:generated />
	*/
	public abstract void stored (<java:import><sw:javaType select="$model" alias="gwtdatatype" package="true"/></java:import> <c:get select="$domainObjName"/>);
}
