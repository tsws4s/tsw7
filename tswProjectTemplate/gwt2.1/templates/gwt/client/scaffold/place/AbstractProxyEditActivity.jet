<%@ jet package="com.skyway.templates" class="AbstractProxyEditActivityTemplate"%>
<%@taglib prefix="swgwt" id="com.skyway.integration.google.webtoolkit.common.skywayGWTCodeGenTags"%>

package <sw:package select="$model" alias="AbstractProxyEditActivity"var="pkg"/>;
<java:importsLocation package="{$pkg}"/>

/**
 * Abstract activity for editing a record. Subclasses must provide access to the
 * request that will be fired when Save is clicked.
 * <p>
 * Instances are not reusable. Once an activity is stoped, it cannot be
 * restarted.
 * 
 * @param <P> the type of Proxy being edited
 */
public abstract class AbstractProxyEdit<java:import>com.google.gwt.activity.shared.Activity</java:import><P extends <java:import><swgwt:getRequestFactoryPackage/>.shared.EntityProxy</java:import>> implements Activity,
    ProxyEditView.Delegate {

  protected final ProxyEditView<P, ?> view;
  private final <java:import>com.google.gwt.place.shared.PlaceController</java:import> placeController;

  private <java:import><swgwt:getRequestFactoryPackage suffix="gwt"/>.client.RequestFactoryEditorDriver</java:import><P, ?> editorDriver;
  private boolean waiting;

  public <sw:javaType select="$model" alias="AbstractProxyEditActivity" package="false"/>(ProxyEditView<P, ?> view, PlaceController placeController) {
    this.view = view;
    this.placeController = placeController;
  }

  public void cancelClicked() {
    String unsavedChangesWarning = mayStop();
    if ((unsavedChangesWarning == null)
        || <java:import>com.google.gwt.user.client.Window</java:import>.confirm(unsavedChangesWarning)) {
      editorDriver = null;
      exit(false);
    }
  }

  public String mayStop() {
    if (isWaiting() || changed()) {
      return "Are you sure you want to abandon your changes?";
    }

    return null;
  }

  public void onCancel() {
    onStop();
  }

  public void onStop() {
    view.setDelegate(null);
    editorDriver = null;
  }

  public void saveClicked() {
    if (!changed()) {
      return;
    }
    
    setWaiting(true);
    editorDriver.flush().fire(new <java:import><swgwt:getRequestFactoryPackage/>.shared.Receiver</java:import><Void>() {
      /*
       * Callbacks do nothing if editorDriver is null, we were stopped in
       * midflight
       */
      @Override
      public void onFailure(<java:import><swgwt:getRequestFactoryPackage/>.shared.ServerFailure</java:import> error) {
        if (editorDriver != null) {
          setWaiting(false);
          super.onFailure(error);
        }
      }

      @Override
      public void onSuccess(Void ignore) {
        if (editorDriver != null) {
          // We want no warnings from mayStop, so:

          // Defeat isChanged check
          editorDriver = null;

          // Defeat call-in-flight check
          setWaiting(false);

          exit(true);
        }
      }

      @Override
      public void on<java:import><swgwt:getRequestFactoryPackage/>.shared.Violation</java:import>(<java:import>java.util.Set</java:import><Violation> errors) {
        if (editorDriver != null) {
          setWaiting(false);
          editorDriver.setViolations(errors);
        }
      }
    });
  }

  public void start(<java:import>com.google.gwt.user.client.ui.AcceptsOneWidget</java:import> display, <java:import>com.google.gwt.event.shared.EventBus</java:import> eventBus) {
    editorDriver = view.createEditorDriver();
    view.setDelegate(this);
    editorDriver.edit(getProxy(), createSaveRequest(getProxy()));
    display.setWidget(view);
  }

  /**
   * Called once to create the appropriate request to save
   * changes.
   * 
   * @return the request context to fire when the save button is clicked
   */
  protected abstract <java:import><swgwt:getRequestFactoryPackage/>.shared.RequestContext</java:import> createSaveRequest(P proxy);

  /**
   * Called when the user cancels or has successfully saved. This default
   * implementation tells the {@link PlaceController} to show the details of the
   * edited record.
   * 
   * @param saved true if changes were comitted, false if user canceled
   */
  protected void exit(@SuppressWarnings("unused") boolean saved) {
    placeController.goTo(new ProxyPlace(getProxyId(), ProxyPlace.Operation.DETAILS));
  }

  /**
   * Get the proxy to be edited. Must be mutable, typically via a call to
   * {@link RequestContext#edit(EntityProxy)}, or
   * {@link RequestContext#create(Class)}.
   */
  protected abstract P getProxy();

  @SuppressWarnings("unchecked")
  // id type always matches proxy type
  protected <java:import><swgwt:getRequestFactoryPackage/>.shared.EntityProxyId</java:import><P> getProxyId() {
    return (EntityProxyId<P>) getProxy().stableId();
  }

  private boolean changed() {
    return editorDriver != null && editorDriver.flush().isChanged();
  }

  /**
   * @return true if we're waiting for an rpc response.
   */
  private boolean isWaiting() {
    return waiting;
  }

  /**
   * While we are waiting for a response, we cannot poke setters on the proxy
   * (that is, we cannot call editorDriver.flush). So we set the waiting flag to
   * warn ourselves not to, and to disable the view.
   */
  private void setWaiting(boolean wait) {
    this.waiting = wait;
    view.setEnabled(!wait);
  }
}
