<%@ jet package="com.skyway.templates" class="ProxyPlaceTemplate"%>
<%@taglib prefix="swgwt" id="com.skyway.integration.google.webtoolkit.common.skywayGWTCodeGenTags"%>

package <sw:package select="$model" alias="ProxyPlace"var="pkg"/>;
<java:importsLocation package="{$pkg}"/>

/**
 * A place in the app that deals with a specific {@link <java:import><swgwt:getRequestFactoryPackage/>.shared.RequestFactory</java:import>} proxy.
 */
public class <sw:javaType select="$model" alias="ProxyPlace" package="false"/> extends <java:import>com.google.gwt.place.shared.Place</java:import> {
  /**
   * The things you do with a record, each of which is a different bookmarkable
   * location in the scaffold app.
   */
  public enum Operation {
    CREATE, EDIT, DETAILS
  }

  /**
   * Tokenizer.
   */
  @<java:import>com.google.gwt.place.shared.Prefix</java:import>("r")
  public static class Tokenizer implements <java:import>com.google.gwt.place.shared.PlaceTokenizer</java:import><<sw:javaType select="$model" alias="ProxyPlace" package="false"/>> {
    /**
     * 
     */
    private static final String SEPARATOR = "!";
    private final RequestFactory requests;

    public Tokenizer(RequestFactory requests) {
      this.requests = requests;
    }

    public <sw:javaType select="$model" alias="ProxyPlace" package="false"/> getPlace(String token) {
      String bits[] = token.split(SEPARATOR);
      Operation operation = Operation.valueOf(bits[1]);
      if (Operation.CREATE == operation) {
        return new <sw:javaType select="$model" alias="ProxyPlace" package="false"/>(requests.getProxyClass(bits[0]));
      }
      return new <sw:javaType select="$model" alias="ProxyPlace" package="false"/>(requests.getProxyId(bits[0]), operation);
    }

    public String getToken(<sw:javaType select="$model" alias="ProxyPlace" package="false"/> place) {
      if (Operation.CREATE == place.getOperation()) {
        return requests.getHistoryToken(place.getProxyClass()) + SEPARATOR
            + place.getOperation();
      }
      return requests.getHistoryToken(place.getProxyId()) + SEPARATOR
          + place.getOperation();
    }
  }

  private final <java:import><swgwt:getRequestFactoryPackage/>.shared.EntityProxyId</java:import><?> proxyId;
  private final Class<? extends <java:import><swgwt:getRequestFactoryPackage/>.shared.EntityProxy</java:import>> proxyClass;
  private final Operation operation;

  public <sw:javaType select="$model" alias="ProxyPlace" package="false"/>(Class<? extends EntityProxy> proxyClass) {
    this.operation = Operation.CREATE;
    this.proxyId = null;
    this.proxyClass = proxyClass;
  }

  public <sw:javaType select="$model" alias="ProxyPlace" package="false"/>(EntityProxyId<?> record) {
    this(record, Operation.DETAILS);
  }

  public <sw:javaType select="$model" alias="ProxyPlace" package="false"/>(EntityProxyId<?> proxyId, Operation operation) {
    this.operation = operation;
    this.proxyId = proxyId;
    this.proxyClass = null;
    assert Operation.CREATE != operation;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    <sw:javaType select="$model" alias="ProxyPlace" package="false"/> other = (<sw:javaType select="$model" alias="ProxyPlace" package="false"/>) obj;
    if (operation != other.operation) {
      return false;
    }
    if (proxyClass == null) {
      if (other.proxyClass != null) {
        return false;
      }
    } else if (!proxyClass.equals(other.proxyClass)) {
      return false;
    }
    if (proxyId == null) {
      if (other.proxyId != null) {
        return false;
      }
    } else if (!proxyId.equals(other.proxyId)) {
      return false;
    }
    return true;
  }

  public Operation getOperation() {
    return operation;
  }

  public Class<? extends EntityProxy> getProxyClass() {
    return proxyId != null ? proxyId.getProxyClass() : proxyClass;
  }

  /**
   * @return the proxyId, or null if the operation is {@link Operation#CREATE}
   */
  public EntityProxyId<?> getProxyId() {
    return proxyId;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((operation == null) ? 0 : operation.hashCode());
    result = prime * result
        + ((proxyClass == null) ? 0 : proxyClass.hashCode());
    result = prime * result + ((proxyId == null) ? 0 : proxyId.hashCode());
    return result;
  }

  @Override
  public String toString() {
    return "<sw:javaType select="$model" alias="ProxyPlace" package="false"/> [operation=" + operation + ", proxy=" + proxyId
        + ", proxyClass=" + proxyClass + "]";
  }
}
