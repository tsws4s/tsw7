<%@ jet 
package="com.skyway.integration.google.webtoolkit.deploy.templates" 
class="MultiRelatedWidgetTemplate" 
%>
<%@taglib id="org.eclipse.jet.javaTags" prefix="java"%>
<%@taglib prefix="ws" id="org.eclipse.jet.workspaceTags"%>
<%@taglib prefix="c" id="org.eclipse.jet.controlTags"%>
<%@taglib prefix="sw" id="org.skyway.integration.java.skywayCodeGenTags"%>

package <sw:package select="$model" alias="gwteditwidget" var="pkg"/>;
<sw:javaType select="$model" package="true" var="fullyQualifiedClassName" emit="false"/>
<java:importsLocation package="{$pkg}"/>
<java:impliedImport name="{$fullyQualifiedClassName}"/>

<sw:getVariableName select="$model" uncapitalize="true" var="domainObjName" emit="false"/> <sw:getVariableName select="$model" uncapitalize="false" var="DomainObjName" emit="false"/>

/**
* A view that can be used to manage a related list of <sw:javaType select="$model" alias="gwtdatatype" package="false"/>s that represent a relationship to another object.
* 
<sw:generated />
*/
public class <sw:javaType select="$model" alias="gwtmultirelatedwidget" package="false"/> extends <java:import> com.google.gwt.user.client.ui.Composite</java:import> implements <sw:javaType select="$model" alias="gwtrelatededitor" package="false"/>.Display{
	/**
	* Interface for UIBinder extension
<sw:generated />
	*/ 
	@<java:import>com.google.gwt.uibinder.client.UiTemplate</java:import>("<sw:javaType select="$model" alias="gwtmultirelatedwidgetuixml" package="false"/>.xml")
	interface RelatedBinder extends <java:import>com.google.gwt.uibinder.client.UiBinder</java:import><<java:import>com.google.gwt.user.client.ui.Widget</java:import>, <sw:javaType select="$model" alias="gwtmultirelatedwidget" package="false"/>>{}
	
	/**
	* Instance of UIBinder extension representing the view
<sw:generated />
	*/ 
	private static RelatedBinder binder = <java:import>com.google.gwt.core.client.GWT</java:import>.create(RelatedBinder.class);
		
	/**
	* The <sw:javaType select="$model" alias="gwttable" package="true"/> that provides the list management for the relationship editing
<sw:generated />
	*/ 
	@<java:import>com.google.gwt.uibinder.client.UiField</java:import>
	<java:import><sw:javaType select="$model" alias="gwttable" package="true"/></java:import> <sw:getVariableName select="$model" uncapitalize="true"/>Table;
	
	/**
	* The New button
<sw:generated />
	*/ 
	@UiField
	<java:import>com.google.gwt.user.client.ui.Button</java:import> newButton;
	
	
	/**
	* The Select button
<sw:generated />
	*/ 
	@UiField
	Button selectButton;
	
	
	/**
	* The disclosure panel from the View, injected here to enable event handling
<sw:generated />
	*/ 
	@UiField
	<java:import>com.google.gwt.user.client.ui.DisclosurePanel</java:import> <c:get select="$domainObjName"/>sPanel;
	
	
	/**
	* Constructor
<sw:generated />
	*/ 
	public <sw:javaType select="$model" alias="gwtmultirelatedwidget" package="false"/>() {
		initWidget (binder.createAndBindUi(this));
	}

	/**
	* Returns the manager for the List of <sw:javaType select="$model" alias="gwtdatatype" package="false"/>s in the relationship
<sw:generated />
	*/ 
	public <java:import>com.google.gwt.user.client.ui.HasValue</java:import><<java:import>java.util.Set</java:import><<java:import><sw:javaType select="$model" alias="gwtdatatype" package="true"/></java:import>>> <c:get select="$domainObjName"/>s() {
		return <sw:getVariableName select="$model" uncapitalize="true"/>Table;
	}

	/**
	* Returns the HasOpenHandlers instance that can be used to detect when the relationship data should be loaded
<sw:generated />
	*/ 
	public <java:import>com.google.gwt.event.logical.shared.HasOpenHandlers</java:import><DisclosurePanel> get<c:get select="$DomainObjName"/>sOpened() {
		return <c:get select="$domainObjName"/>sPanel;
	}

	/**
	* Returns the HasClickHandlers instance that represents the New gesture
<sw:generated />
	*/ 
	public <java:import>com.google.gwt.event.dom.client.HasClickHandlers</java:import> getNewButton() {
		return newButton;
	}

	

	/**
	* Returns the HasClickHandlers instance that represents the Select gesture
<sw:generated />
	*/ 
	public HasClickHandlers getSelectButton() {
		return selectButton;
	}

	/**
	* Returns the value manager for the list of related <sw:javaType select="$model" alias="gwtdatatype" package="false"/>s
<sw:generated />
	*/ 
	public HasValue<Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>> selected<c:get select="$domainObjName"/>s() {
		return new HasValue<Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>>() {

			public Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>> getValue() {
				return <sw:getVariableName select="$model" uncapitalize="true"/>Table.getSelected<c:get select="$domainObjName"/>s();
			}

			public void setValue(Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>> value) {
				// TODO Auto-generated method stub
			}

			public void setValue(Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>> value, boolean fireEvents) {
				// TODO Auto-generated method stub
			}

			public <java:import>com.google.gwt.event.shared.HandlerRegistration</java:import> addValueChangeHandler(<java:import>com.google.gwt.event.logical.shared.ValueChangeHandler</java:import><Set<<sw:javaType select="$model" alias="gwtdatatype" package="false"/>>> handler) {
				// TODO Auto-generated method stub
				return null;
			}

			public void fireEvent(<java:import>com.google.gwt.event.shared.GwtEvent</java:import><?> event) {
				// TODO Auto-generated method stub
			}
		};
	}
	
	/**
	* Returns the HasClickHandlers instance that represents the Remove gesture
<sw:generated />
	*/ 
	public HasClickHandlers getRemoveButton() {
		return new HasClickHandlers() {
			public HandlerRegistration addClickHandler(<java:import>com.google.gwt.event.dom.client.ClickHandler</java:import> handler) {
				<sw:getVariableName select="$model" uncapitalize="true"/>Table.setDeleteHandler(handler);
				return new HandlerRegistration() {
					public void removeHandler() {
						<sw:getVariableName select="$model" uncapitalize="true"/>Table.setDeleteHandler(null);
					}
				};
			}

			public void fireEvent(GwtEvent<?> event) {
				if (event instanceof <java:import>com.google.gwt.event.dom.client.ClickEvent</java:import>)
				<sw:getVariableName select="$model" uncapitalize="true"/>Table.getDeleteHandler().onClick((ClickEvent)event);
			}
		};
	}
	
	/**
	* Returns the HasClickHandlers instance that represents the Edit gesture
<sw:generated />
	*/ 
	public HasClickHandlers getEditButton() {
		return new HasClickHandlers() {
			public HandlerRegistration addClickHandler(<java:import>com.google.gwt.event.dom.client.ClickHandler</java:import> handler) {
				<sw:getVariableName select="$model" uncapitalize="true"/>Table.setEditHandler(handler);
				return new HandlerRegistration() {
					public void removeHandler() {
						<sw:getVariableName select="$model" uncapitalize="true"/>Table.setEditHandler(null);
					}
				};
			}

			public void fireEvent(GwtEvent<?> event) {
				if (event instanceof <java:import>com.google.gwt.event.dom.client.ClickEvent</java:import>)
				<sw:getVariableName select="$model" uncapitalize="true"/>Table.getEditHandler().onClick((ClickEvent)event);
			}
		};
	}
}
